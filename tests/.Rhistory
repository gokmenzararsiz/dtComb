DOSE    = "DOSE",
ROUTE   = "ROUTE",
ID      = "ID"),
NCA_options   = list(max.aucinf.pext  = 10) )
NCA_results = system_fetch_nca(cfg, analysis_name = "pk_single_dose")
NCA_results
View(NCA_results)
head(NCA)
head(NCA_results)
nca_cols = system_fetch_nca_columns(cfg, "pk_single_dose")
rhandsontable(nca_cols[["NCA_col_summary"]],  width="100%", height=200)
cfg = system_rpt_read_template(cfg, template="PowerPoint")
cfg = system_rpt_add_slide(cfg,
template = "title_slide",
elements = list( title= list(content = "NCA Single Dose PK", type    = "text")))
nca_table = system_nca_summary(cfg,
analysis_name    = "pk_single_dose",
params_include   = c( "ID", "cmax", "tmax", "half.life", "auclast"),
params_header    = list(cmax = c( "<label>", "(ng/ml)")),
ds_wrangle       = "NCA_sum = NCA_sum %>% dplyr::filter(Dose == 30)",
summary_stats    = list("<MEAN> (<STD>)" = c("auclast", "half.life"),
"<MEDIAN>"       = c("tmax")),
summary_labels   = list(MEAN             = "Mean",
STD              = "Std Dev",
N                = "N obs",
MEDIAN           = "Median",
SE               = "Std Err."),
summary_location = "ID")
nca_table[["vignette"]] = set_table_properties(nca_table$nca_summary_ft,layout = "autofit")
library(haven)
Roche_Kopya <- read_sav("C:/Users/ilayd/Desktop/Halef-Okan-Dogan/LDLscore/09.08.2021/Ahu_03122021/BrandaGore/Roche/Roche - Kopya.sav")
View(Roche_Kopya)
duzelt_roche <- read.delim("C:/Users/ilayd/Desktop/LDLscore/duzelt_roche.txt", header=FALSE)
View(duzelt_roche)
library(haven)
Roche <- read_sav("C:/Users/ilayd/Desktop/LDLscore/Roche.sav")
View(Roche)
data_children <- read_sav("roche.sav")
TC <- as.matrix(data_v1$TC)
HDLc <- as.matrix(data_v1$HDL)
TC <- as.matrix(Roche$TC)
HDLc <- as.matrix(Roche$HDL)
TG <- as.matrix(Roche$TG)
HDLc <- as.matrix(Roche$HDL)
HDLc <- as.matrix(Roche$HDLc)
TG <- as.matrix(Roche$TG)
TG_Category <- as.matrix(Roche$TG_categorized2)
nonHDLc_Category <- as.matrix(Roche$nonHDLC_categorized)
response1 <- matrix(nrow = 39558)
for (i in 1:39558) {
rowNumber = TG_Category[i,]
colNumber = nonHDLc_Category[i,]
response1[i,] = TC[i,] - HDLc[i,] - (TG[i,] / (as.numeric(x[rowNumber,colNumber])))
}
for (i in 1:39558) {
rowNumber = TG_Category[i,]
colNumber = nonHDLc_Category[i,]
response1[i,] = TC[i,] - HDLc[i,] - (TG[i,] / (as.numeric(duzelt_roche[rowNumber,colNumber])))
}
write.table(response1, file = 'martin_hopkins2.txt', sep = "\t",row.names = F)
response1 <- matrix(nrow = 39558)
for (i in 1:39558) {
rowNumber = TG_Category[i,]
colNumber = nonHDLc_Category[i,]
response1[i,] = TC[i,] - HDLc[i,] - (TG[i,] / (as.numeric(duzelt_roche[rowNumber,colNumber])))
}
write.table(response1, file = 'martin_hopkins2.txt', sep = "\t",row.names = F)
space <- cbind.data.frame(poly(HDLc, 3),
poly(TC, 3),
poly(TG, 3))
library(haven)
Roche <- read_sav("C:/Users/ilayd/Desktop/LDLscore/Roche.sav")
View(Roche)
library(haven)
Roche <- read_sav("C:/Users/ilayd/Desktop/LDLscore/Roche.sav")
View(Roche)
space <- cbind.data.frame(poly(Roche$HDLc, 3),
poly(Roche$TC, 3),
poly(Roche$TG, 3),
poly(Roche$nonHDLC, 3))
head(Roche)
data$LDLC_measured_categorized <- factor(data$LDLC_measured_categorized, levels = c("< 70", "70 to 99",
"100 to 129", "130 to 159", "160 to 189", ">= 190"))
space <- cbind.data.frame(poly(Roche$HDLc, 3),
poly(Roche$TC, 3),
poly(Roche$TG, 3),
poly(Roche$nonHDLC, 3))
cv.model <-
glmnet::cv.glmnet(
x = as.matrix(space),
y = Roche$LDLC_measured_categorized,
alpha = 0,
family = "binomial"
)
?cv.glmnet
space <- cbind.data.frame(poly(Roche$HDLc, 3),
poly(Roche$TC, 3),
poly(Roche$TG, 3),
poly(Roche$nonHDLC, 3))
cv.model <-
glmnet::cv.glmnet(
x = as.matrix(space),
y = Roche$LDLC_measured_categorized,
alpha = 0,
# family = "binomial"
)
model <- glmnet::glmnet(
x = space,
y = Roche$LDLC_measured_categorized,
alpha = 0,
# family = "binomial",
lambda = cv.model$lambda.min
)
comb.score <-
predict(model, newx = as.matrix(space), type = "response")
comb.score
suppressMessages(pROC::roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), plot = show.plot, print.auc = TRUE,
direction = direction, print.auc.y = 0.30, col = "#F8766D", lwd = 4,
legacy.axes = TRUE, percent = FALSE, add = TRUE,
main = "ROC Curves for Combined Diagnostic Test"))
suppressMessages(pROC::roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), plot = TRUE, print.auc = TRUE,
direction = "auto", print.auc.y = 0.30, col = "#F8766D", lwd = 4,
legacy.axes = TRUE, percent = FALSE, add = TRUE,
main = "ROC Curves for Combined Diagnostic Test"))
suppressMessages(pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), plot = TRUE, print.auc = TRUE,
direction = "auto", print.auc.y = 0.30, col = "#F8766D", lwd = 4,
legacy.axes = TRUE, percent = FALSE, add = TRUE,
main = "ROC Curves for Combined Diagnostic Test"))
?multiclass.roc
suppressMessages(pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), data = Roche))
model
cv.model
cv.model <-
glmnet::cv.glmnet(
x = as.matrix(space),
y = Roche$LDLC_measured_categorized,
alpha = 1,
# family = "binomial"
)
model <- glmnet::glmnet(
x = space,
y = Roche$LDLC_measured_categorized,
alpha = 1,
# family = "binomial",
lambda = cv.model$lambda.min
)
}
comb.score <-
predict(model, newx = as.matrix(space), type = "response")
parameters <- model
parameters
suppressMessages(pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), data = Roche))
model
cv.model
install.packages("pkdata")
library(pkdata)
data(dosage)
library(readr)
dosage <- read_csv("C:/Users/ilayd/AppData/Local/R/win-library/4.2/pkdata/extdata/dosage.csv")
View(dosage)
library(ubiquity)
fr = workshop_fetch(section="NCA", overwrite=TRUE)
cfg = build_system()
fr = system_fetch_template(cfg, template = "NCA")
cfg = build_system(system_file="system.txt")
cfg = system_load_data(cfg, dsname     = "PKDATA",
data_file  = "pk_all_sd.csv")
cfg = system_nca_run(cfg,  dsname        = "PKDATA",
dscale        = 1e6,
analysis_name = "pk_single_dose",
extrap_C0     = FALSE,
dsmap         = list(TIME    = "TIME_HR",
NTIME   = "TIME_HR",
CONC    = "C_ng_ml",
DOSE    = "DOSE",
ROUTE   = "ROUTE",
ID      = "ID"),
NCA_options   = list(max.aucinf.pext  = 10) )
NCA_results = system_fetch_nca(cfg, analysis_name = "pk_single_dose")
NCA_results
nca_cols = system_fetch_nca_columns(cfg, "pk_single_dose")
rhandsontable(nca_cols[["NCA_col_summary"]],  width="100%", height=200)
library(rhandsontable)
rhandsontable(nca_cols[["NCA_col_summary"]],  width="100%", height=200)
cfg = system_rpt_read_template(cfg, template="PowerPoint")
cfg = system_rpt_add_slide(cfg,
template = "title_slide",
elements = list( title= list(content = "NCA Single Dose PK", type    = "text")))
cfg = system_rpt_nca(cfg=cfg, analysis_name="pk_single_dose")
system_rpt_save_report(cfg=cfg, output_file=file.path("output","pk_single_dose-report.pptx"))
nca_table = system_nca_summary(cfg,
analysis_name    = "pk_single_dose",
params_include   = c( "ID", "cmax", "tmax", "half.life", "auclast"),
params_header    = list(cmax = c( "<label>", "(ng/ml)")),
ds_wrangle       = "NCA_sum = NCA_sum %>% dplyr::filter(Dose == 30)",
summary_stats    = list("<MEAN> (<STD>)" = c("auclast", "half.life"),
"<MEDIAN>"       = c("tmax")),
summary_labels   = list(MEAN             = "Mean",
STD              = "Std Dev",
N                = "N obs",
MEDIAN           = "Median",
SE               = "Std Err."),
summary_location = "ID")
nca_table[["vignette"]] = set_table_properties(nca_table$nca_summary_ft,layout = "autofit")
View(nca_table)
nca_table[["vignette"]] = set_table_properties(nca_table$nca_summary_ft,layout = "autofit")
model <- glm(
Roche$LDLC_measured_categorized ~ splines::bs(Roche$HDLc, degree = 3, df = 4) +
splines::bs(Roche$TC, degree = 3, df = 4),
splines::bs(Roche$TG, degree = 3, df = 4),
splines::bs(Roche$nonHDLC, degree = 3, df = 4),
data = Roche
)
nonHDLC <- Roche$nonHDLC
model <- glm(
Roche$LDLC_measured_categorized ~ splines::bs(HDLc, degree = 3, df = 4) +
splines::bs(TC, degree = 3, df = 4),
splines::bs(TG, degree = 3, df = 4),
splines::bs(nonHDLC, degree = 3, df = 4),
data = Roche
)
LDLC_measured_categorized <- Roche$LDLC_measured_categorized
model <- glm(
LDLC_measured_categorized ~ splines::bs(HDLc, degree = 3, df = 4) +
splines::bs(TC, degree = 3, df = 4),
splines::bs(TG, degree = 3, df = 4),
splines::bs(nonHDLC, degree = 3, df = 4),
data = Roche
)
LDLC_measured_categorized
HDLc
TC
TG
nonHDLC
Roche
model <- glm(
LDLC_measured_categorized ~ splines::bs(HDLc, degree = 3, df = 4) +
splines::bs(TC, degree = 3, df = 4) +
splines::bs(TG, degree = 3, df = 4) +
splines::bs(nonHDLC, degree = 3, df = 4) +
data = Roche
)
model <- glm(
LDLC_measured_categorized ~ splines::bs(HDLc, degree = 3, df = 4) +
splines::bs(TC, degree = 3, df = 4) +
splines::bs(TG, degree = 3, df = 4) +
splines::bs(nonHDLC, degree = 3, df = 4) +
data = Roche
)
model <- glm(
LDLC_measured_categorized ~ splines::bs(HDLc, degree = 3, df = 4) +
splines::bs(TC, degree = 3, df = 4) +
splines::bs(TG, degree = 3, df = 4) +
splines::bs(nonHDLC, degree = 3, df = 4),
data = Roche
)
comb.score <-
predict(model, newdata = Roche, type = "response")
comb.score
pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ as.numeric(comb.score), data = Roche)
?multiclass.roc
library(haven)
Roche <- read_sav("C:/Users/ilayd/Desktop/LDLscore/Roche.sav")
View(Roche)
pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ Roche$LDLC_friedewald, data = Roche)
pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ Roche$LDLC_martinhopkins, data = Roche)
pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ Roche$LDLC_martinhopkins_ext, data = Roche)
##sgam
model <- gam::gam(
status ~ gam::s(, df = 4) +
gam::s(HDLc, df = 4) +
gam::s(TC, df = 4) +
gam::s(TG, df = 4) +
gam::s(nonHDLC, df = 4),
data = Roche
)
##sgam
model <- gam::gam(
status ~  gam::s(HDLc, df = 4) +
gam::s(TC, df = 4) +
gam::s(TG, df = 4) +
gam::s(nonHDLC, df = 4),
data = Roche
)
##sgam
model <- gam::gam(
LDLC_measured_categorized ~  gam::s(HDLc, df = 4) +
gam::s(TC, df = 4) +
gam::s(TG, df = 4) +
gam::s(nonHDLC, df = 4),
data = Roche
)
comb.score <-
predict(model, newdata = Roche, type = "response")
pROC::multiclass.roc(Roche$LDLC_measured_categorized ~ comb.score, data = Roche)
View(nca_table)
View(dosage)
install.packages('tinytex')
tinytex::install_tinytex()
getwd()
tinytex::pdflatex('test.tex')
vec1 <- c(1, 4, 7, 6)
vec2 <- c(4, 2, "a", 2)
vec3 <- c(7, "c", "x", 5)
df <- data.frame(vec1, vec2, vec3)
df
df$vec2
vec <- c(1, 4, 7, 6, 4, 2, “a”, 2, 7, “c”, “x”, 5)
matR <- matrix(data = vec, nrow = 4, ncol = 3)
vec <- c(1, 4, 7, 6, 4, 2, “a”, 2, 7, “c”, “x”, 5)
vec <- c(1, 4, 7, 6, 4, 2, "a", 2, 7, "c", "x", 5)
matR <- matrix(data = vec, nrow = 4, ncol = 3)
matR
matR[, -2]
matR[, c(1, 3)]
install.packages("~/GitHub/dtComb_0.99.6.tar.gz", repos = NULL, type = "source")
library(dtComb)
data(exampleData1)
#define the function parameters
markers <- exampleData1[, -1]
status <- factor(exampleData1$group, levels = c("not_needed", "needed"))
event <- "needed"
score1 <- linComb(markers = markers, status = status, event = "needed",
method = "minimax", resample = "none", show.plot = TRUE,
standardize = "none", direction = "<", cutoff.method = "youden")
score1 <- linComb(markers = markers, status = status, event = "needed",
method = "minimax", resample = "none", show.plot = TRUE,
standardize = "none", cutoff.method = "youden")
setwd("~/GitHub/dtComb/R")
devtools::load_all()
score1 <- linComb(markers = markers, status = status, event = "needed",
method = "minimax", resample = "none", show.plot = TRUE,
standardize = "none", cutoff.method = "youden")
source("~/GitHub/dtComb/R/linComb.R")
### Devtools
devtools::load_all() # load the library files
### Devtools
devtools::load_all() # load the library files
data(exampleData1)
#define the function parameters
markers <- exampleData1[, -1]
status <- factor(exampleData1$group, levels = c("not_needed", "needed"))
event <- "needed"
score1 <- linComb(markers = markers, status = status, event = "needed",
method = "minimax", resample = "none", show.plot = TRUE,
standardize = "none", cutoff.method = "youden")
data(aSAH)
# Basic example
roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
install.packages("pROC")
# Basic example
roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
library(pROC)
data(aSAH)
# Basic example
roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
# Basic example
A <-roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
A
### Devtools
devtools::load_all() # load the library files
devtools::document() # generate man files
score1 <- linComb(markers = markers, status = status, event = "needed",
method = "minimax", resample = "none", show.plot = TRUE,
standardize = "none", cutoff.method = "youden")
library(pROC)
data(aSAH)
library(devtools)
library(roxygen2)
### Set path
path <- "C:/Users/ilayd/Documents/GitHub/dtComb"
setwd(path)
### Devtools
devtools::load_all() # load the library files
devtools::document() # generate man files
devtools::build() # build package and create tar file
devtools::check()
devtools::check(manual = TRUE)
setwd("~/GitHub/dtComb/tests")
library(testthat)
library(dtComb)
test_check("dtComb")
data <- read_excel("C:/Users/ilayd/Desktop/Halef-Okan-Dogan/LDLscore3/accuracy.xlsx",
sheet = "nonHDLC_TG_ratio")
library(ggplot2)
library(readxl)
data <- read_excel("C:/Users/ilayd/Desktop/Halef-Okan-Dogan/LDLscore3/accuracy.xlsx",
sheet = "nonHDLC_TG_ratio")
data$Formula <- factor(data$Formula,
levels = c("Friedewald", "Sampson", "NIH", "Martin/Hopkins",
"Extended Martin/Hopkins"))
data$Status <- factor(data$Status, levels = c("Non-diabetic", "Prediabetic", "Diabetic"))
data$non_HDLC_TG_ratio <- factor(data$non_HDLC_TG_ratio, levels = c("< 1.2", ">= 1.2"))
ggplot(data, aes(x = LDL_C, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
ggplot(data, aes(x = non_HDLC_TG_ratio, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
ggplot(data, aes(x = Status, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
install.packages("ggplot2")
ggplot(data, aes(x = Status, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
library(ggplot2)
library(readxl)
data <- read_excel("C:/Users/ilayd/Desktop/Halef-Okan-Dogan/LDLscore3/accuracy.xlsx",
sheet = "nonHDLC_TG_ratio")
data$Formula <- factor(data$Formula,
levels = c("Friedewald", "Sampson", "NIH", "Martin/Hopkins",
"Extended Martin/Hopkins"))
data$Status <- factor(data$Status, levels = c("Non-diabetic", "Prediabetic", "Diabetic"))
data$non_HDLC_TG_ratio <- factor(data$non_HDLC_TG_ratio, levels = c("< 1.2", ">= 1.2"))
ggplot(data, aes(x = Status, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
ggplot(data, aes(x = non_HDLC_TG_ratio, y = (Accuracy_IY), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
ggplot(data, aes(x = non_HDLC_TG_ratio, y = (Accuracy_IY*100), fill = Formula)) +
geom_bar(stat = "identity", position = position_dodge(), colour="black") +
scale_fill_manual(name = "Formula",
values = c("#DCE319FF","#B8DE29FF","#95D840FF","#73D055FF","#55C667FF")) +
theme_bw() +
theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank(),
plot.title = element_text(size = 20, face = "bold"),
text = element_text(size = 20),
axis.title = element_text(face="bold"),
axis.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20)) +
labs(title="Concordances of the different equations for LDL-C estimation by nonHDL -C / TG",
x = "Low-density lipoprotein cholesterol, mg/dL", y = "Concordance, %") +
coord_cartesian(ylim = c(40, 100)) +
facet_grid(Status ~ .)
