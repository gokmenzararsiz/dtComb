library(testthat)
library(dtComb)
test_check("dtComb")
### Devtools
devtools::load_all() # load the library files
devtools::document() # generate man files
devtools::build() # build package and create tar file
devtools::check()
### Set path
path <- "C:/Users/ilayd/Documents/GitHub/dtComb"
setwd(path)
### Devtools
devtools::load_all() # load the library files
devtools::document() # generate man files
devtools::build() # build package and create tar file
test_check("dtComb")
library(testthat)
library(dtComb)
test_check("dtComb")
setwd("~/GitHub/dtComb/tests/testthat")
test_check("dtComb")
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = "taneja",
direction = "<",
cutoff.method = "youden"
)
library(APtools)
library(usethis)
data("exampleData1")
devtools::load_all()
data("exampleData1")
Data <- exampleData1[-c(83:138), ]
markers <- Data[,-1]
status <- factor(Data$group, levels = c("not_needed", "needed"))
data(mayo)
Data2 <- mayo[-c(42:119), ]
markers2 <- Data2[, 3:4]
status2 <- factor(Data2[, 2], levels = c(1, 0))
Data3 <-
read.csv(
"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data",
header = FALSE
)
Data3 <- Data3[-c(121:262), ]
markers3 <- Data3[, 4:5]
status3 <- factor(Data3[, 2], levels = c("B", "M"))
load("result_data/test_mathComb.rda")
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = "taneja",
direction = "<",
cutoff.method = "youden"
)
for (distance in c("lorentzian",
"avg",
"taneja",
"kumar-johnson")) {
set.seed(14042022)
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = distance,
direction = "<",
cutoff.method = "youden"
)
test_that("mathComb functions ...", {
expect_length(res, 11)
expect_equal(as.numeric(res$CombScore), r$Comb.score[r$Method == method], tolerance =
0.01)
expect_equal(as.numeric(res$AUC_table$AUC[[3]]),  r$AUC[r$Distance == distance][1], tolerance =
0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$sp[[1]]),
r$SPE[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$se[[1]]),
r$SENS[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$ThresholdCombined), r$Cutoff[r$Distance == distance][1], tolerance =
0.01)
})
}
for (distance in c("lorentzian",
"avg",
"taneja",
"kumar-johnson")) {
set.seed(14042022)
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = distance,
direction = "<",
cutoff.method = "youden"
)
test_that("mathComb functions ...", {
expect_length(res, 11)
expect_equal(as.numeric(res$CombScore), r$Comb.score[r$Distance == method], tolerance =
0.01)
expect_equal(as.numeric(res$AUC_table$AUC[[3]]),  r$AUC[r$Distance == distance][1], tolerance =
0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$sp[[1]]),
r$SPE[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$se[[1]]),
r$SENS[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$ThresholdCombined), r$Cutoff[r$Distance == distance][1], tolerance =
0.01)
})
}
for (distance in c("lorentzian",
"avg",
"taneja",
"kumar-johnson")) {
set.seed(14042022)
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = distance,
direction = "<",
cutoff.method = "youden"
)
test_that("mathComb functions ...", {
expect_length(res, 11)
expect_equal(as.numeric(res$CombScore), r$Comb.score[r$Distance == distance], tolerance =
0.01)
expect_equal(as.numeric(res$AUC_table$AUC[[3]]),  r$AUC[r$Distance == distance][1], tolerance =
0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$sp[[1]]),
r$SPE[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$se[[1]]),
r$SENS[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$ThresholdCombined), r$Cutoff[r$Distance == distance][1], tolerance =
0.01)
})
}
for (distance in c("lorentzian",
"avg",
"taneja",
"kumar-johnson")) {
set.seed(14042022)
res <- mathComb(
markers = markers,
status = status,
event = "needed",
method = "distance",
distance = distance,
direction = "<",
cutoff.method = "youden"
)
test_that("mathComb functions ...", {
expect_length(res, 11)
expect_equal(as.numeric(res$CombScore), r$Comb.score[r$Distance == distance], tolerance =
0.1)
expect_equal(as.numeric(res$AUC_table$AUC[[3]]),  r$AUC[r$Distance == distance][1], tolerance =
0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$sp[[1]]),
r$SPE[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$DiagStatCombined$detail$se[[1]]),
r$SENS[r$Distance == distance][1],
tolerance = 0.01)
expect_equal(as.numeric(res$ThresholdCombined), r$Cutoff[r$Distance == distance][1], tolerance =
0.01)
})
}
